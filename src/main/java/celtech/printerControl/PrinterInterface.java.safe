/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package celtech.printerControl;

import celtech.coreUI.DisplayManager;
import celtech.coreUI.controllers.StatusScreenState;
import celtech.printerControl.comms.RoboxCommsManager;
import celtech.printerControl.comms.commands.tx.RoboxTxPacket;
import celtech.printerControl.comms.commands.tx.TxPacketTypeEnum;
import celtech.printerControl.comms.commands.exceptions.RoboxCommsException;
import celtech.printerControl.comms.commands.tx.RoboxTxPacketFactory;
import celtech.printerControl.comms.commands.rx.StatusResponse;
import celtech.printerControl.comms.commands.GCodeConstants;
import celtech.printerControl.comms.commands.rx.AckResponse;
import celtech.printerControl.comms.commands.rx.RoboxRxPacket;
import celtech.printerControl.comms.commands.tx.FormatHeadEEPROM;
import celtech.printerControl.comms.commands.tx.FormatReelEEPROM;
import celtech.printerControl.comms.commands.tx.WritePrinterID;
import java.util.ResourceBundle;
import javafx.scene.paint.Color;
import libertysystems.stenographer.Stenographer;
import libertysystems.stenographer.StenographerFactory;

/*
 * @author ianhudson
 */
public class PrinterInterface
{

    private static RoboxCommsManager printerCommsManager = null;
    private Stenographer steno = StenographerFactory.getStenographer(this.getClass().getName());
    private int dataFileSequenceNumber = 0;
    private StatusScreenState statusScreenState = StatusScreenState.getInstance();
    private ResourceBundle i18nBundle = null;

    protected PrinterInterface()
    {
        printerCommsManager = RoboxCommsManager.getInstance();
        i18nBundle = DisplayManager.getLanguageBundle();
    }

    public void sendDirectGCode(final String gcodeToSend) throws RoboxCommsException
    {
        sendDirectGCode(null, gcodeToSend);
    }

    public void sendDirectGCode(Printer printerToUse, final String gcodeToSend) throws RoboxCommsException
    {
        RoboxTxPacket gcodePacket = RoboxTxPacketFactory.createPacket(TxPacketTypeEnum.EXECUTE_GCODE);
        gcodePacket.setMessagePayload(gcodeToSend + "\n");

        if (printerToUse == null)
        {
            Printer currentPrinter = statusScreenState.getCurrentlySelectedPrinter();

            if (currentPrinter != null)
            {
                currentPrinter.addToGCodeTranscript(gcodeToSend);
                AckResponse response = (AckResponse) printerCommsManager.submitForWrite(currentPrinter.getPrinterPort(), gcodePacket);
                if (response.isError())
                {
                    currentPrinter.addToGCodeTranscript(i18nBundle.getString("gcodeEntry.errorMessage"));

                } else
                {
                    currentPrinter.addToGCodeTranscript(i18nBundle.getString("gcodeEntry.ackMessage"));
                }
            }
        } else
        {
            printerToUse.addToGCodeTranscript(gcodeToSend);
            AckResponse response = (AckResponse) printerCommsManager.submitForWrite(printerToUse.getPrinterPort(), gcodePacket);
            if (response.isError())
            {
                printerToUse.addToGCodeTranscript(i18nBundle.getString("gcodeEntry.errorMessage"));

            } else
            {
                printerToUse.addToGCodeTranscript(i18nBundle.getString("gcodeEntry.ackMessage"));
            }
        }
    }

    public void sendDataFileStart(final String fileID) throws RoboxCommsException
    {
        sendDataFileStart(statusScreenState.getCurrentlySelectedPrinter().getPrinterPort(), fileID);
    }

    public void sendDataFileStart(final String printerName, final String fileID) throws RoboxCommsException
    {
        RoboxTxPacket gcodePacket = RoboxTxPacketFactory.createPacket(TxPacketTypeEnum.START_OF_DATA_FILE);
        gcodePacket.setMessagePayload(fileID);

        printerCommsManager.submitForWrite(printerName, gcodePacket);
    }

    public void sendDataFileChunk(final String payloadData, final int sequenceNumber) throws RoboxCommsException
    {
        sendDataFileChunk(statusScreenState.getCurrentlySelectedPrinter().getPrinterPort(), payloadData, sequenceNumber);
    }

    public void sendDataFileChunk(final String printerName, final String payloadData, final int sequenceNumber) throws RoboxCommsException
    {
        RoboxTxPacket gcodePacket = RoboxTxPacketFactory.createPacket(TxPacketTypeEnum.DATA_FILE_CHUNK);
        gcodePacket.setMessagePayload(payloadData);
        gcodePacket.setSequenceNumber(sequenceNumber);

        StatusResponse response = (StatusResponse) printerCommsManager.submitForWrite(printerName, gcodePacket);
        dataFileSequenceNumber++;
    }

    public void sendDataFileEnd(final String payloadData, final int sequenceNumber) throws RoboxCommsException
    {
        sendDataFileEnd(statusScreenState.getCurrentlySelectedPrinter().getPrinterPort(), payloadData, sequenceNumber);
    }

    public void sendDataFileEnd(final String printerName, final String payloadData, final int sequenceNumber) throws RoboxCommsException
    {
        RoboxTxPacket gcodePacket = RoboxTxPacketFactory.createPacket(TxPacketTypeEnum.END_OF_DATA_FILE);
        gcodePacket.setMessagePayload(payloadData);
        gcodePacket.setSequenceNumber(sequenceNumber);

        printerCommsManager.submitForWrite(printerName, gcodePacket);
    }

    public void resetErrors() throws RoboxCommsException
    {
        RoboxTxPacket gcodePacket = RoboxTxPacketFactory.createPacket(TxPacketTypeEnum.RESET_ERRORS);

        printerCommsManager.submitForWrite(statusScreenState.getCurrentlySelectedPrinter().getPrinterPort(), gcodePacket);
    }

    public void updateFirmware(final String printerName, final String firmwareID) throws RoboxCommsException
    {
        RoboxTxPacket gcodePacket = RoboxTxPacketFactory.createPacket(TxPacketTypeEnum.UPDATE_FIRMWARE);
        gcodePacket.setMessagePayload(firmwareID);

        printerCommsManager.submitForWrite(printerName, gcodePacket);
    }

    public void sendInitiatePrint(final String printJobUUID) throws RoboxCommsException
    {
        sendInitiatePrint(null, printJobUUID);
    }

    public void sendInitiatePrint(String printerName, final String printJobUUID) throws RoboxCommsException
    {
        RoboxTxPacket gcodePacket = RoboxTxPacketFactory.createPacket(TxPacketTypeEnum.INITIATE_PRINT);
        gcodePacket.setMessagePayload(printJobUUID);

        if (printerName == null)
        {
            printerCommsManager.submitForWrite(statusScreenState.getCurrentlySelectedPrinter().getPrinterPort(), gcodePacket);
        } else
        {
            printerCommsManager.submitForWrite(printerName, gcodePacket);
        }
    }

    public void sendAbortPrint() throws RoboxCommsException
    {
        sendAbortPrint(null);
    }

    public void sendAbortPrint(String printerName) throws RoboxCommsException
    {
        RoboxTxPacket gcodePacket = RoboxTxPacketFactory.createPacket(TxPacketTypeEnum.ABORT_PRINT);

        if (printerName == null)
        {
            printerCommsManager.submitForWrite(statusScreenState.getCurrentlySelectedPrinter().getPrinterPort(), gcodePacket);
        } else
        {
            printerCommsManager.submitForWrite(printerName, gcodePacket);
        }
    }

    public void sendPausePrint() throws RoboxCommsException
    {
        RoboxTxPacket gcodePacket = RoboxTxPacketFactory.createPacket(TxPacketTypeEnum.PAUSE_PRINT);

        printerCommsManager.submitForWrite(statusScreenState.getCurrentlySelectedPrinter().getPrinterPort(), gcodePacket);
    }

    public void sendResumePrint() throws RoboxCommsException
    {
        RoboxTxPacket gcodePacket = RoboxTxPacketFactory.createPacket(TxPacketTypeEnum.RESUME_PRINT);

        printerCommsManager.submitForWrite(statusScreenState.getCurrentlySelectedPrinter().getPrinterPort(), gcodePacket);
    }

    public void switchOnHeadLEDs(Printer printerToUse, boolean on) throws RoboxCommsException
    {
        if (on)
        {
            sendDirectGCode(printerToUse, GCodeConstants.switchOnHeadLEDs);
        } else
        {
            sendDirectGCode(printerToUse, GCodeConstants.switchOffHeadLEDs);
        }
    }

    public boolean writeIDAndColour(String printerName, String printerID, Color colour) throws RoboxCommsException
    {
        WritePrinterID writeIDCmd = (WritePrinterID) RoboxTxPacketFactory.createPacket(TxPacketTypeEnum.WRITE_PRINTER_ID);
        writeIDCmd.setIDAndColour(printerID, colour);

        Printer selectedPrinter = statusScreenState.getCurrentlySelectedPrinter();

        if (printerName == null)
        {
            printerName = selectedPrinter.getPrinterPort();
        }

        AckResponse response = (AckResponse) printerCommsManager.submitForWrite(printerName, writeIDCmd);

        boolean success = false;

        if (response.isError() == false)
        {
            success = true;
            // Special case - we don't get this information back in a status request so update it as we set the new value
            selectedPrinter.setPrinterID(printerID);
            selectedPrinter.setPrinterColour(colour);
        }

        return success;
    }

    public void formatHeadEEPROM() throws RoboxCommsException
    {
        FormatHeadEEPROM formatHead = (FormatHeadEEPROM) RoboxTxPacketFactory.createPacket(TxPacketTypeEnum.FORMAT_HEAD_EEPROM);
        printerCommsManager.submitForWrite(statusScreenState.getCurrentlySelectedPrinter().getPrinterID(), formatHead);
    }

    public void formatReelEEPROM() throws RoboxCommsException
    {
        FormatReelEEPROM formatReel = (FormatReelEEPROM) RoboxTxPacketFactory.createPacket(TxPacketTypeEnum.FORMAT_REEL_EEPROM);
        printerCommsManager.submitForWrite(statusScreenState.getCurrentlySelectedPrinter().getPrinterID(), formatReel);
    }

    public void writeHeadEEPROM() throws RoboxCommsException
    {

    }
}
